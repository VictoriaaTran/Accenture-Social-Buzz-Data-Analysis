# -*- coding: utf-8 -*-
"""Accenture Data Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vLIqePEacEFNm_3LiTIGJbwex_qrmEnA

#Data Cleaning
* dropped specific columns that does not provide quantitative results.
* Clean data by removed rows with missing values
* renamed columns to semantic naming
"""

import pandas as pd

df = pd.read_csv('Content.csv')
df2 = pd.read_csv('Reactions.csv')
df3 = pd.read_csv('ReactionTypes.csv')

#remove userID
df = df.drop(['User ID'], axis = 1)
df2 = df2.drop(['User ID'], axis = 1)

#drop column URL in Content bc it does not
#provide quantitative output for category.
df = df.iloc[:, :-1] #drop last column


# print('df1:', df2)
#drow rows that has missing values
df = df.dropna()
df2 = df2.dropna(subset=['Type'])
df3 = df3.dropna()

# print('df2:', df2)

#rename Type to Content Type
df = df.rename(columns={"Type": "Content Type"})
df2 = df2.rename(columns={"Type" : "Reaction Type"})
df3 = df3.rename(columns={"Type": "Reaction Type"})

# print('done',df2)

#drop the first column
df = df.iloc[:, 1:]
df2 = df2.iloc[:, 1:]
df3 = df3.iloc[:, 1:]

#replace quotation with empty string
df['Category'] = df['Category'].str.replace('"','')


"""#Data Modeling
1. Create a final data set by merging your three tables together
2. Figure out the Top 5 content categories by using summation of the scores for each category
3. Discover additional insights for the dataset

"""


#merge the 1st and 2nd together by Content ID
merged_df = pd.merge(df, df2, on='Content ID')


#merge the rest with the Reaction Type
reaction_merge = pd.merge(merged_df, df3, on='Reaction Type')

# print(reaction_merge)
#creating a dictionary to store category and its score
category_score = dict()

# Loop through each row
for index, row in reaction_merge.iterrows():
    # Access the value from 'category' and score
    category = row['Category'].lower()
    score = row['Score']
    if category in category_score:
      category_score[category] = category_score[category] + score
    else:
      category_score[category] = score
    # print(category)
    # print(score)


print(category_score)

#sorted the dictionary to identify top 5 category from the highest to lowest score
sorted_list = dict(sorted(category_score.items(), key=lambda x: x[1], reverse=True))
print("Total number of unique categories: ",len(sorted_list))

#print the top 5 most popular category with corresponding score
print('\nTop 5 most popular category:')
#getting the top 5 categories only
top5_category_reaction = dict()
i = 1
for key, value in sorted_list.items():
  if i < 6:
    top5_category_reaction[key] = 0
    print(f'{i}. {key}: {value}')
    i += 1

print(top5_category_reaction)

"""###Analyze How many reactions are there to the most popular category?"""

print('\nReaction counts for each category:')
#find the reaction types corresponding to the category
category_reactions = {}
for index, row in reaction_merge.iterrows():
  category = row['Category'].lower()
  reaction_type = row['Reaction Type']
  if category in category_reactions:
    category_reactions[category].append(reaction_type)
  else:
    category_reactions[category] = [reaction_type]

# print(category_reactions)
# Dictionary to store counts
category_reaction_counts = {}

# Loop through values in the dictionary and count occurrences for each category
for category, values_list in category_reactions.items():
    category_counts = {}  # Counts for each category
    for reaction in values_list:
        if reaction in category_counts:
            category_counts[reaction] += 1
        else:
            category_counts[reaction] = 1
    #display the count for reaction in each category
    category_reaction_counts[category] = category_counts


# Print the counts for each category
for category, counts in category_reaction_counts.items():
    sorted_category_reaction = dict(sorted(counts.items(), key=lambda x: x[1], reverse=True))
    print(f"{category}: {counts}")
    print(f"Sorted {category} {sorted_category_reaction},'\n'")
    if category in top5_category_reaction:
      top5_category_reaction[category] = sorted_category_reaction

print(top5_category_reaction)

"""###Analyze What was the month with the most posts?

#Data Visualization
Visualize important insights for the popular category and contents
- visualize the categories and corresponding reaction score
"""

import matplotlib.pyplot as plt

#sample dataset
categories = list()
reaction_scores = list()
for key, value in sorted_list.items():
  categories.append(key)
  reaction_scores.append(value)

#plotting the bar graph of reaction scores corresponding to the category
bars = plt.bar(categories, reaction_scores)

#adjust the font roation to fit the graph
plt.xticks(rotation='vertical')

#add axis labels
plt.xlabel("Categories")
plt.ylabel("Reaction Score")
plt.title("Popularity by category")

# Display the exact score above each bar
# zip function pairs each bar with the corresponding score
# bar.get_x() + bar.get_width() / 2 determines the x-coordinate for placing the text at the center of each bar
for bar, score in zip(bars, reaction_scores):
    plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), str(score),
             ha='center', va='bottom', fontsize=6) #adjust font size of each score
#display the plot
plt.show()

"""##Visualize the distribution of different reactions within each category"""

import matplotlib.pyplot as plt
import numpy as np

#create a figure and set of subplots(axes), size of figure decided by figsize (width = 8, height = 4*len)
fig, axes = plt.subplots(nrows=len(category_reaction_counts), figsize=(8, 4 * len(category_reaction_counts)))

#for each category, create a bar plot
for i, (category, counts) in enumerate(category_reaction_counts.items()):
    reactions = list(counts.keys())
    counts_values = list(counts.values())

    #creates bar for each category with colormap
    axes[i].bar(reactions, counts_values, color=plt.cm.Paired(range(len(reactions))))
    axes[i].set_title(f'Reaction Counts for {category}')
    axes[i].set_xlabel('Reactions')
    axes[i].set_ylabel('Count')
    #rotation the font of reaction to vertical
    axes[i].tick_params(axis='x', rotation =90)

#fit the graph without overlapping content
plt.tight_layout()
plt.show()

"""##visualize the reaction counts for the top 5 most popular categories"""

import matplotlib.pyplot as plt

#create a figure and set of subplots(axes), size of figure decided by figsize (width = 8, height = 4*len)
fig, axes = plt.subplots(nrows=len(top5_category_reaction), figsize=(8, 4 * len(top5_category_reaction)))

for i, (category, counts) in enumerate(top5_category_reaction.items()):
    reactions = list(counts.keys())
    counts_values = list(counts.values())

    #creates bar for each category with colormap
    axes[i].bar(reactions, counts_values, color=plt.cm.Paired(range(len(reactions))))
    axes[i].set_title(f'Reaction Counts for {category}')
    axes[i].set_xlabel('Reactions')
    axes[i].set_ylabel('Count')
    #rotation the font of reaction to vertical
    axes[i].tick_params(axis='x', rotation =90)

#fit the graph without overlapping content
plt.tight_layout()
plt.show()

"""## Visualize the month with the most content posting"""

